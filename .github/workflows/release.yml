name: Software release
on:
  push:
    tags:
      - "v*"

jobs:
  tests:
    name: Tests and coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2 
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17
      - name: Perform tests
        working-directory: application
        run: make test
      - name: Prepare coverage report
        working-directory: application
        run: make coverage
      - name: Upload coverage report
        uses: actions/upload-artifact@v2.2.4
        with:
          name: coverage
          path: "application/cover.out"
  codecov:
    name: Codecov
    runs-on: ubuntu-latest
    needs: [tests]
    if: (needs.tests.result == 'success')
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2 
      - name: Download coverage report
        uses: actions/download-artifact@v2.0.10
        with:
          name: coverage
      - name: Prepare coverage report
        run: cp application/cover.out application/coverage.txt
        continue-on-error: false
      - name: Upload coverage report to Codecov
        working-directory: application
        run: bash <(curl -s https://codecov.io/bash)
  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    needs: [tests]
    if: (needs.tests.result == 'success')
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Download coverage report
        uses: actions/download-artifact@v2.0.10
        with:
          name: coverage
      - run: tree
      - name: Prepare adjusted coverage report
        run: cat cover.out | sed 's/icikowski.pl\/gpts/application/' | tee application/cover.out
        continue-on-error: false
      - name: Perform SonarCloud scan
        uses: SonarSource/sonarcloud-github-action@master
        with:
          args: >
            -Dsonar.go.coverage.reportPaths=application/cover.out
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  prerelease:
    name: Pre-release steps
    runs-on: ubuntu-latest
    needs: [codecov,sonarcloud]
    if: (needs.codecov.result == 'success' && needs.sonarcloud.result == 'success')
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Determine version
        id: version
        run: echo ::set-output name=version::${GITHUB_REF/refs\/tags\/v/}
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17
      - name: Build binaries
        working-directory: application
        env:
          GPTS_VERSION: ${{ steps.version.outputs.version }}
        run: |
          GOOS=linux GOARCH=amd64 go build . -o bin/gpts-${GPTS_VERSION}-linux-amd64
          GOOS=linux GOARCH=386 go build . -o bin/gpts-${GPTS_VERSION}-linux-i386
          GOOS=windows GOARCH=amd64 go build . -o bin/gpts-${GPTS_VERSION}-windows-amd64.exe
          GOOS=windows GOARCH=386 go build . -o bin/gpts-${GPTS_VERSION}-windows-i386.exe
      - name: Upload artifacts
        uses: actions/upload-artifact@v2.2.4
        with:
          name: binaries
          path: "application/bin/*"
  docker:
    name: Docker image
    runs-on: ubuntu-latest
    needs: [prerelease]
    if: (needs.prerelease.result == 'success')
    env:
      GPTS_VERSION: ${{ needs.prerelease.outputs.version }}
      GPTS_IMAGE: gpts
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Build image
        working-directory: ./application
        run: docker build . --file Dockerfile --tag $GPTS_IMAGE --label "runnumber=${GITHUB_RUN_ID}"
      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Push image
        working-directory: ./application
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$GPTS_IMAGE
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          
          docker tag $GPTS_IMAGE $IMAGE_ID:$GPTS_VERSION
          docker push $IMAGE_ID:$GPTS_VERSION
  helm:
    name: Helm chart
    runs-on: ubuntu-latest
    needs: [prerelease, docker]
    if: (needs.docker.result == 'success')
    env:
      GPTS_VERSION: ${{ needs.prerelease.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install Helm
        uses: Azure/setup-helm@v1
      - name: Replace values in chart
        working-directory: chart
        run: cat gpts/Chart.template | sed "s/\[\[GPTS_VERSION\]\]/${GPTS_VERSION}/" | tee gpts/Chart.yaml
      - name: Lint chart
        working-directory: chart
        run: helm lint gpts
        continue-on-error: false
      - name: Package chart
        working-directory: chart
        run: helm package gpts
      - name: Prepare SSH connection
        uses: kielabokkie/ssh-key-and-known-hosts-action@v1.2.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}
          ssh-host: ${{ secrets.SSH_HOST }}
          ssh-port: ${{ secrets.SSH_PORT }}
      - name: Upload chart
        working-directory: chart
        env:
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PATH: ${{ secrets.SSH_PATH }}
        run: scp -P $SSH_PORT gpts-*.tgz $SSH_USER@$SSH_HOST:$SSH_PATH
      - name: Trigger repository update
        env:
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PATH: ${{ secrets.SSH_PATH }}
          SSH_BINS: ${{ secrets.SSH_BINS }}
        run: ssh $SSH_USER@$SSH_HOST -p $SSH_PORT "export PATH=\$PATH:$SSH_BINS && cd $SSH_PATH && update-helm-repo"
  release:
    name: Release steps
    runs-on: ubuntu-latest
    needs: [prerelease, docker, helm]
    if: (needs.prerelease.result == 'success' && needs.docker.result == 'success' && needs.helm.result == 'success')
    steps:
    - name: Download built binaries
      uses: actions/download-artifact@v2.0.10
      with:
        name: binaries
    - name: List files
      run: tree
    - name: Release
      uses: marvinpinto/action-automatic-releases@v1.2.1
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        prerelease: false
        files: application/bin/gpts-*
